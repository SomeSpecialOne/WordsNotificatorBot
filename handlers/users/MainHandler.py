from aiogram import types
# from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from states.MainStates import Menu
from ClientClass import User
from keyboards.inline.Menu import time_zone, sleep_from, sleep_to, period, accept, sending_on
from keyboards.inline.Callbackdatas import menu_callback
from keyboards.default.MainKeyboard import settings_kb, hide

from loader import dp, db


def get_users(database=db):
    global users
    sql = database.cursor()
    sql.execute('''SELECT [User_id], [First_name], [Last_name], [Username], 
                    [Time_zone], [Sleep_from], [Sleep_to], [Period] FROM Users''')
    ans = sql.fetchall()
    for data in ans:
        user = User(data[0], data[1], data[2], data[3])
        user.time_zone = data[4]
        user.sleep_from = data[5]
        user.sleep_to = data[6]
        user.period = data[7]
        users.update({data[0]: user})


users = {}


@dp.message_handler(CommandStart(), state="*")
async def bot_start(message: types.Message):
    global users

    await message.answer('üëã')
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n"
                         f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!"
                         f"–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É...")

    user = User(message.from_user.id, message.from_user.first_name,
                message.from_user.last_name, message.from_user.username)
    user.create_user()

    users.update({message.from_user.id: user})

    await message.answer('–ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC üåç\n'
                         '–ú–æ—Å–∫–≤–∞, –î–æ–Ω–µ—Ü–∫, –ë–µ–ª–≥–æ—Ä–æ–¥ +3, –ö–∏–µ–≤ +2 –∏ —Ç.–¥.', reply_markup=time_zone)

    await Menu.time_zone.set()


@dp.callback_query_handler(state=Menu.time_zone)
async def get_answer(call: types.CallbackQuery):
    global users
    if call.data == 'decision:-2':
        utc = -2
    elif call.data == 'decision:-1':
        utc = -1
    elif call.data == 'decision:0':
        utc = 0
    elif call.data == 'decision:1':
        utc = 1
    elif call.data == 'decision:2':
        utc = 2
    elif call.data == 'decision:3':
        utc = 3
    else:
        utc = 4
    try:
        user = users[call.from_user.id]
    except KeyError:
        get_users()
        user = users[call.from_user.id]

    await call.message.edit_text('–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —è –Ω–µ –±—É–¥—É —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç—å\n'
                                 '–í –∫–∞–∫–æ–º —á–∞—Å—É —Ç—ã –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å?üåô', reply_markup=sleep_from)

    user.update_time_zone(utc)
    users.update({call.from_user.id: user})
    await Menu.sleep_from.set()


@dp.callback_query_handler(state=Menu.sleep_from)
async def get_answer(call: types.CallbackQuery):
    global users
    if call.data == 'decision:21':
        time_sleep_from = 21
    elif call.data == 'decision:22':
        time_sleep_from = 22
    elif call.data == 'decision:23':
        time_sleep_from = 23
    else:
        time_sleep_from = 0
    try:
        user = users[call.from_user.id]
    except KeyError:
        get_users()
        user = users[call.from_user.id]

    await call.message.edit_text('–ê –≤ –∫–∞–∫–æ–º —á–∞—Å—É –≤—Å—Ç–∞–µ—à—å?‚è∞', reply_markup=sleep_to)

    user.update_time_sleep_from(time_sleep_from)
    users.update({call.from_user.id: user})
    await Menu.sleep_to.set()


@dp.callback_query_handler(state=Menu.sleep_to)
async def get_answer(call: types.CallbackQuery):
    global users
    if call.data == 'decision:6':
        time_sleep_to = 6
    elif call.data == 'decision:7':
        time_sleep_to = 7
    elif call.data == 'decision:8':
        time_sleep_to = 8
    else:
        time_sleep_to = 9
    try:
        user = users[call.from_user.id]
    except KeyError:
        get_users()
        user = users[call.from_user.id]

    await call.message.edit_text('–ù—É –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø.\n'
                                 '–ö–∞–∫ —á–∞—Å—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ª–æ–≤–∞?‚è±\n'
                                 '–†–∞–∑ –≤ ...', reply_markup=period)

    user.update_time_sleep_to(time_sleep_to)
    users.update({call.from_user.id: user})
    await Menu.period.set()


@dp.callback_query_handler(state=Menu.period)
async def get_answer(call: types.CallbackQuery):
    global users
    if call.data == 'decision:3600':
        period_f = 3600
    elif call.data == 'decision:7200':
        period_f = 7200
    else:
        period_f = 10800
    try:
        user = users[call.from_user.id]
    except KeyError:
        get_users()
        user = users[call.from_user.id]

    user.update_period(period_f)
    current_time = user.get_current_time()
    msg = f'–¢–∞–∫, –Ω–∞ —á–∞—Å–∞—Ö —É —Ç–µ–±—è —Å–µ–π—á–∞—Å {current_time},\n' \
          f'–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Ç–µ–±—è —Å {user.sleep_from}:00 –¥–æ {user.sleep_to}:00\n'
    if user.period == 3600:
        msg += f'–ò –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–π —á–∞—Å.\n' \
               f'–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?'
    elif user.period == 7200:
        msg += f'–ò –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞.\n' \
               f'–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?'
    else:
        msg += f'–ò –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–µ —Ç—Ä–∏ —á–∞—Å–∞.\n' \
               f'–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?'
    await call.message.edit_text(text=msg, reply_markup=accept)
    users.update({call.from_user.id: user})
    await Menu.accept.set()


@dp.callback_query_handler(state=Menu.accept)
async def get_answer(call: types.CallbackQuery):
    global users
    if call.data == 'decision:yes':
        try:
            user = users[call.from_user.id]
        except KeyError:
            get_users()
            user = users[call.from_user.id]
        time_to_send = user.get_time_to_send()
        user.save_settings()
        await call.message.edit_text('–û—Ç–ª–∏—á–Ω–æ. –ù–∞—á–∏–Ω–∞–µ–º!')
        await call.message.answer(f'–Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ {time_to_send}', reply_markup=settings_kb)
        await Menu.done.set()
    elif call.data == 'decision:no':
        await call.message.edit_text('–î–∞–≤–∞–π —Å–Ω–æ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Å–µ.\n'
                                     '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC', reply_markup=time_zone)
        await Menu.time_zone.set()


@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô', state="*")
async def get_answer(message: types.Message):
    try:
        user = users[message.from_user.id]
    except KeyError:
        get_users()
        try:
            user = users[message.from_user.id]
        except KeyError:
            await message.answer('–ù–∞–∂–º–∏ /start')
            return
    await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC', reply_markup=time_zone)
    await Menu.time_zone.set()


@dp.message_handler(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üö´', state="*")
async def get_answer(message: types.Message):
    global users
    try:
        user = users[message.from_user.id]
    except KeyError:
        get_users()
        try:
            user = users[message.from_user.id]
        except KeyError:
            await message.answer('–ù–∞–∂–º–∏ /start')
            return
    user.off_on(0)
    await message.answer('üòî', reply_markup=hide)
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=sending_on)
    await Menu.stop.set()


@dp.callback_query_handler(menu_callback.filter(item_name='send'), state=Menu.stop)
async def get_answer(call: types.CallbackQuery):
    global users
    try:
        user = users[call.from_user.id]
    except KeyError:
        get_users()
        user = users[call.from_user.id]
    user.off_on(1)
    time_to_send = user.get_time_to_send()
    await call.message.edit_text('üëç')
    await call.message.answer(f'–Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ {time_to_send}', reply_markup=settings_kb)
    await Menu.done.set()


@dp.message_handler(state='*')
async def answer_other(message: types.Message):
    await message.answer('üòï')


# @dp.message_handler(content_types=['sticker'])
# async def sticker(message: types.Message):
#     print(message.sticker.file_id)
